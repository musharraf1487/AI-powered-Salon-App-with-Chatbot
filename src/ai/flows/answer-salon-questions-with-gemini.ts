// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow that answers questions about the salon's services, policies, and other FAQs using the Gemini API.
 *
 * - answerSalonQuestions - A function that answers questions about the salon.
 * - AnswerSalonQuestionsInput - The input type for the answerSalonQuestions function.
 * - AnswerSalonQuestionsOutput - The return type for the answerSalonQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerSalonQuestionsInputSchema = z.object({
  question: z.string().describe('The question to answer about the salon.'),
});
export type AnswerSalonQuestionsInput = z.infer<typeof AnswerSalonQuestionsInputSchema>;

const AnswerSalonQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer to the question about the salon.'),
});
export type AnswerSalonQuestionsOutput = z.infer<typeof AnswerSalonQuestionsOutputSchema>;

export async function answerSalonQuestions(input: AnswerSalonQuestionsInput): Promise<AnswerSalonQuestionsOutput> {
  return answerSalonQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerSalonQuestionsPrompt',
  input: {schema: AnswerSalonQuestionsInputSchema},
  output: {schema: AnswerSalonQuestionsOutputSchema},
  prompt: `You are a chatbot for a premium hair and beauty salon in Canada called GlamBot. Your job is to answer questions about the salon's services, policies, and other FAQs. Use the following information to answer the question.\n\nSalon Services: Haircuts, Facials, Manicures, Bridal Makeup, Massage, Threading, Waxing, Skin Treatments\nPricing tiers per service: Basic/Deluxe/Premium\nOperating Hours: Mon-Sat 10AM to 8PM\nClosed on Sundays\nPolicy Highlights: 24-hour cancellation policy, 15-minute grace period for appointments\nStaff availability per day: Varies\nDuration per service: Haircut: 30 mins, Facial: 1 hour\n\nQuestion: {{{question}}}`,
});

const answerSalonQuestionsFlow = ai.defineFlow(
  {
    name: 'answerSalonQuestionsFlow',
    inputSchema: AnswerSalonQuestionsInputSchema,
    outputSchema: AnswerSalonQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
